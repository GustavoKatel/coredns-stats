// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	stats "github.com/GustavoKatel/coredns-stats"
	mock "github.com/stretchr/testify/mock"
)

// StatsBackend is an autogenerated mock type for the StatsBackend type
type StatsBackend struct {
	mock.Mock
}

type StatsBackend_Expecter struct {
	mock *mock.Mock
}

func (_m *StatsBackend) EXPECT() *StatsBackend_Expecter {
	return &StatsBackend_Expecter{mock: &_m.Mock}
}

// Ready provides a mock function with given fields:
func (_m *StatsBackend) Ready() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StatsBackend_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type StatsBackend_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *StatsBackend_Expecter) Ready() *StatsBackend_Ready_Call {
	return &StatsBackend_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *StatsBackend_Ready_Call) Run(run func()) *StatsBackend_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StatsBackend_Ready_Call) Return(_a0 bool) *StatsBackend_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatsBackend_Ready_Call) RunAndReturn(run func() bool) *StatsBackend_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields:
func (_m *StatsBackend) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatsBackend_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type StatsBackend_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *StatsBackend_Expecter) Start() *StatsBackend_Start_Call {
	return &StatsBackend_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *StatsBackend_Start_Call) Run(run func()) *StatsBackend_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StatsBackend_Start_Call) Return(_a0 error) *StatsBackend_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatsBackend_Start_Call) RunAndReturn(run func() error) *StatsBackend_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *StatsBackend) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StatsBackend_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type StatsBackend_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *StatsBackend_Expecter) Stop() *StatsBackend_Stop_Call {
	return &StatsBackend_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *StatsBackend_Stop_Call) Run(run func()) *StatsBackend_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *StatsBackend_Stop_Call) Return(_a0 error) *StatsBackend_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StatsBackend_Stop_Call) RunAndReturn(run func() error) *StatsBackend_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: domain, questionType, metadata
func (_m *StatsBackend) Store(domain string, questionType string, metadata stats.Metadata) {
	_m.Called(domain, questionType, metadata)
}

// StatsBackend_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type StatsBackend_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - domain string
//   - questionType string
//   - metadata stats.Metadata
func (_e *StatsBackend_Expecter) Store(domain interface{}, questionType interface{}, metadata interface{}) *StatsBackend_Store_Call {
	return &StatsBackend_Store_Call{Call: _e.mock.On("Store", domain, questionType, metadata)}
}

func (_c *StatsBackend_Store_Call) Run(run func(domain string, questionType string, metadata stats.Metadata)) *StatsBackend_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(stats.Metadata))
	})
	return _c
}

func (_c *StatsBackend_Store_Call) Return() *StatsBackend_Store_Call {
	_c.Call.Return()
	return _c
}

func (_c *StatsBackend_Store_Call) RunAndReturn(run func(string, string, stats.Metadata)) *StatsBackend_Store_Call {
	_c.Call.Return(run)
	return _c
}

// NewStatsBackend creates a new instance of StatsBackend. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStatsBackend(t interface {
	mock.TestingT
	Cleanup(func())
}) *StatsBackend {
	mock := &StatsBackend{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
